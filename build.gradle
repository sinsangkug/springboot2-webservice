// Java와 Spring Boot 프레임워크를 사용하여 웹 애플리케이션을 만들기 위한 설정 파일 build.gradle 입니다.


/*
 잠시 쉬어 가기 (용어 알아보기)

 빌드란? 소스 코드를 실행 가능한 소프트웨어로 만드는 과정을 말합니다.
 빌드는 소스 코드의 컴파일, 패키징, 테스트, 배포 등 다양한 작업들을 포함합니다.

소스 코드는 인간이 이해할 수 있는 형태의 코드이지만, 이 코드를 직접 실행하려면 컴퓨터가 이해할 수 있는 형태로 변환해야 합니다.
이것을 '컴파일'이라고 합니다.

그리고 변환된 코드를 실행 가능한 형태로 만드는 것을 '빌드'라고 합니다.
이렇게 빌드된 코드는 컴퓨터에서 직접 실행할 수 있게 되는데, 이것이 실행 가능한 애플리케이션입니다.
 */




/*
Gradle 빌드 시스템은 스크립트를 실행하여 프로젝트를 빌드합니다.

이때 buildscript 블록은 Gradle 스크립트를 빌드하는데 필요한 라이브러리나 플러그인 등을 정의합니다.

아래 코드에서는 Spring Boot 애플리케이션을 빌드하기 위해 필요한 플러그인과 라이브러리를 추가하고 있습니다.

spring-boot-gradle-plugin: Spring Boot 애플리케이션을 빌드하기 위한 플러그인입니다.
springBootVersion: 사용할 Spring Boot 버전을 지정하는 변수입니다.

따라서 buildscript 블록은 Gradle 빌드 시스템이 Spring Boot 애플리케이션을 빌드하는 데 필요한 플러그인과 라이브러리를 가져올 수 있도록 정의하는 역할을 합니다.
*/
buildscript {

    /*
    코드는 Gradle 빌드 스크립트의 ext 블록 안에 springBootVersion 이라는 변수를 선언하고, 값을 '2.1.9.RELEASE' 로 지정하는 것을 의미합니다.
    여기서 ext 블록은 Gradle에서 사용하는 확장 속성(전역 변수)을 정의하는 블록입니다.
    springBootVersion 변수는 Spring Boot 라이브러리의 버전을 지정하는 용도로 사용됩니다.
    따라서 이 코드는 해당 Gradle 프로젝트에서 사용할 Spring Boot 라이브러리의 버전을 '2.1.9.RELEASE' 로 설정하는 것을 의미합니다.
    이렇게 버전을 변수로 지정해놓으면, 나중에 라이브러리를 업그레이드하거나 다운그레이드할 때 변수값만 변경하면 되므로 유용합니다.
     */
    ext {

        springBootVersion = '2.1.9.RELEASE'
    }



/*
Gradle은 프로젝트 빌드 시 필요한 의존성 라이브러리를 다운로드 받아야 합니다.
이때 다운로드 받을 수 있는 저장소(repository)를 명시해야 합니다.
코드에서 repositories 블록은 Gradle이 의존성 라이브러리를 다운로드 받을 수 있는 저장소를 선언하는 부분입니다.
mavenCentral()은 Maven 중앙 저장소에서 라이브러리를 다운로드 받을 수 있도록 설정하고,
jcenter()는 JCenter 저장소에서 라이브러리를 다운로드 받을 수 있도록 설정합니다.
Maven 중앙 저장소와 JCenter 저장소는 각각 다양한 라이브러리들이 저장되어 있으며,
필요한 라이브러리를 찾아서 다운로드 받아 사용할 수 있습니다.
이렇게 저장소를 설정해 놓으면 Gradle이 자동으로 해당 저장소에서 라이브러리를 다운로드 받아 프로젝트를 빌드합니다.
 */
    repositories {
        mavenCentral() //예전에 많이 사용 한 원격 저장소
        jcenter() //현재 많이 사용하는 원격 저장소
    }


/*
코드에서 dependencies 블록은 현재 프로젝트의 Gradle 빌드 스크립트에서 필요로 하는 외부 라이브러리들을 정의하는 부분입니다.
이 부분에서는 org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion} 라이브러리를 사용하도록 설정하고 있습니다.

spring-boot-gradle-plugin 라이브러리는 Spring Boot 애플리케이션을 빌드하고 실행하기 위해 필요한 Gradle 플러그인 중 하나입니다.
이 플러그인을 사용하면 Gradle을 사용하여 Spring Boot 애플리케이션을 더 쉽게 빌드하고 실행할 수 있습니다.

${springBootVersion}은 위에서 정의된 ext 블록에서 springBootVersion 변수로 정의된 버전 정보입니다.
따라서 위 코드에서는 ${springBootVersion} 변수가 2.1.9.RELEASE 값으로 설정되고,
이 값을 사용하여 spring-boot-gradle-plugin 라이브러리의 버전을 설정하고 있습니다.
이렇게 외부 라이브러리의 버전 정보를 변수화하여 관리하면, 해당 라이브러리의 버전이 변경되었을 때 코드 전체를 수정하는 것이 아니라,
변수의 값을 변경하는 것만으로도 전체 프로젝트에서 사용하는 라이브러리 버전을 일괄적으로 변경할 수 있어서 유지보수성이 높아집니다.
*/
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


/*
apply plugin 블록은 Gradle에서 제공하는 플러그인을 프로젝트에 추가하는 부분입니다.

플러그인은 애플리케이션의 특정 기능을 구현하기 위해 필요한 코드 모음입니다.

예를 들어, Java 플러그인을 추가하면 프로젝트를 Java 언어로 작성할 수 있게 됩니다.

마찬가지로, Spring Boot 플러그인은 Spring Boot 애플리케이션을 빌드할 때 필요한 설정들을 제공합니다.

위 코드에서는 Java, Eclipse, Spring Boot, 그리고 Gradle의 의존성 관리 플러그인을 추가하고 있습니다.

Java 플러그인은 자바 코드를 컴파일하는 데 필요한 도구들을 제공하며, Eclipse 플러그인은 이클립스 IDE에서 프로젝트를 사용하기 쉽게 만들어줍니다.

Spring Boot 플러그인은 Spring Boot 애플리케이션을 빌드하는 데 필요한 설정들을 추가하며, Gradle의 의존성 관리 플러그인은 프로젝트에서 사용하는 외부 라이브러리들을 관리합니다.

따라서, apply plugin 블록을 사용하여 필요한 플러그인들을 추가해주면, 이후 Gradle 빌드 시 해당 플러그인들이 사용되어 프로젝트를 빌드하게 됩니다.
*/


/*
apply plugin: 'java'는
이 Gradle 프로젝트가 Java 언어로 작성되었으며, 이를 컴파일하기 위해 필요한 구성 요소들을 추가해줍니다.
이 플러그인을 적용하면 Java 소스 코드가 컴파일되고 클래스 파일이 생성됩니다.
즉, Java 소스 코드를 컴파일할 수 있도록 Java 플러그인을 적용합니다.
이 플러그인은 JavaDoc 문서를 생성하고 실행 가능한 JAR 파일을 만드는 등의 기능을 제공합니다.
 */
apply plugin: 'java' // Java 플러그인을 적용합니다.

/*
 이 부분은 이 Gradle 프로젝트가 Eclipse IDE에서 사용되도록 지원하도록 설정합니다.
 Eclipse에서 사용할 수 있는 프로젝트 파일을 생성해주며, 이 파일들은 이 프로젝트를 Eclipse로 불러올 때 사용됩니다.
 */
apply plugin: 'eclipse'

/*
'org.springframework.boot' 플러그인을 적용하면 Spring Boot 애플리케이션을 더 쉽게 빌드할 수 있습니다.
이 부분은 이 Gradle 프로젝트가 Spring Boot 프레임워크를 사용하여 개발할 것임을 나타내며,
Spring Boot 플러그인이 Spring Boot 애플리케이션을 빌드하기 위해 필요한 구성을 자동으로 설정해줍니다.
이 플러그인을 적용하면 Spring Boot 애플리케이션을 빌드할 때 필요한 기본 설정과 빌드 스크립트를 제공합니다.
 */
apply plugin: 'org.springframework.boot' // Spring Boot 플러그인을 적용합니다.


/*
이 부분은 Gradle 프로젝트에서 의존성 관리를 위한 Spring Boot Dependency Management 플러그인을 사용하겠다는 것을 나타내는 부분입니다.
이 플러그인은 Spring Boot에서 사용되는 라이브러리들을 자동으로 관리해줍니다.
 */
apply plugin: 'io.spring.dependency-management' // Spring Boot의 의존성 관리 플러그인을 적용합니다.
                                                // Spring Boot 프로젝트에서 사용할 수 있는 의존성들을 관리하고, 최신 버전으로 업데이트하는 기능을 제공합니다.



/*
group 'com.jojoldu.book' ????????????????????????
    이 Gradle 프로젝트가 속한 그룹을 나타냅니다. 즉, 이 프로젝트가 어떤 소속인지를 나타냅니다.
    'com.jojoldu.book'는 일종의 패키지명과 비슷한 개념으로, 이 프로젝트를 만든 개발자들이 정한 이름입니다.


version '1.0.4-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss") ????????????????????????
    이 Gradle 프로젝트의 버전을 나타냅니다.
    '1.0.4-SNAPSHOT'은 이 프로젝트의 기본 버전이며,
    이어지는 '+new Date().format("yyyyMMddHHmmss")'는 현재 시간을 나타냅니다.
    이는 이 프로젝트의 빌드 시간을 나타내는 것으로, 빌드할 때마다 시간 정보가 변경되어 버전이 바뀝니다.

sourceCompatibility = 1.8 ????????????????????????
    이 Gradle 프로젝트가 사용하는 자바 버전을 나타냅니다. '1.8'은 자바 8 버전을 사용한다는 의미입니다.
    이 설정은 이 프로젝트에서 사용하는 자바 코드가 어떤 버전의 자바로 작성되었는지를 나타내며, Gradle은 이 정보를 참고하여 프로젝트를 빌드합니다.

????????????????????????????????????????????????????????????????????????????????????
이러한 설정은 Gradle을 이용하여 프로젝트를 빌드할 때 필요한 구성 정보를 제공합니다.
이를 통해 Gradle은 프로젝트를 자동으로 빌드하고 필요한 라이브러리 및 설정을 가져와서 컴파일, 테스트 및 패키징을 수행할 수 있습니다.
이를 통해 개발자들은 더 쉽게 프로젝트를 관리하고 유지보수할 수 있습니다.
 */
group 'com.jojoldu.book'
version '1.0.4-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8


/*
아래 코드에서 repositories는 해당 프로젝트에서 사용할 외부 라이브러리를 다운로드할 저장소를 정의하는 부분입니다.
mavenCentral()과 jcenter()는 대표적인 저장소 중 하나로, 이 둘을 추가하면 대부분의 라이브러리를 사용할 수 있습니다.
        dependencies는 프로젝트가 사용할 라이브러리를 정의하는 부분입니다. 위 코드에서는 org.springframework.boot:spring-boot-starter-web과 org.springframework.boot:spring-boot-starter-test 라이브러리를 사용합니다.
rg.springframework.boot:spring-boot-starter-web은 스프링 부트를 이용해 웹 어플리케이션을 개발할 때 필요한 라이브러리를 모아놓은 스타터 패키지입니다.
이 패키지를 사용하면 웹 개발을 위해 필요한 라이브러리들을 일일이 추가할 필요 없이 간편하게 사용할 수 있습니다.

org.springframework.boot:spring-boot-starter-test는 스프링 부트에서 제공하는 테스트용 라이브러리 패키지입니다. 이 패키지에는 JUnit, Mockito 등의 테스트 라이브러리가 포함되어 있습니다. 이 패키지를 사용하면 간편하게 단위 테스트를 작성할 수 있습니다.
   */
repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}
